{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-6ab35affa45e00c6c5db11159fd18dc4ecd81b3c",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SplitManager.sol": "project/contracts/SplitManager.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/SplitManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title SplitManager\n * @notice Manages expense splitting groups with debt tracking and settlement\n * @dev Supports ETH and ERC20 tokens for expense tracking and debt payment\n */\ncontract SplitManager {\n    using SafeERC20 for IERC20;\n\n    struct Split {\n        address creator;\n        address[] members;\n        uint256 createdAt;\n        uint256 totalDebt;\n        address defaultToken; // 0x for ETH\n        uint256 spendingCounter;\n    }\n\n    struct Spending {\n        uint256 id;\n        string title;\n        address payer;\n        uint256 amount;\n        address[] forWho;\n        uint256 timestamp;\n        address token;\n    }\n\n    struct Debt {\n        address debtor;\n        address creditor;\n        uint256 amount;\n        address token;\n        bool isPaid;\n    }\n\n    uint256 private _splitIdCounter;\n    mapping(uint256 => Split) public splits;\n    mapping(uint256 => Spending[]) public splitSpendings;\n    mapping(uint256 => mapping(address => mapping(address => Debt))) public debts; // splitId => debtor => creditor => Debt\n    \n    event SplitCreated(\n        uint256 indexed splitId,\n        address indexed creator,\n        address[] initialMembers,\n        address defaultToken\n    );\n    \n    event MemberAdded(\n        uint256 indexed splitId,\n        address indexed member\n    );\n    \n    event MemberRemoved(\n        uint256 indexed splitId,\n        address indexed member\n    );\n    \n    event SpendingAdded(\n        uint256 indexed splitId,\n        uint256 spendingId,\n        string title,\n        address indexed payer,\n        uint256 amount,\n        address[] forWho,\n        address token\n    );\n    \n    event DebtPaid(\n        uint256 indexed splitId,\n        address indexed debtor,\n        address indexed creditor,\n        uint256 amount,\n        address token\n    );\n\n    modifier onlyCreator(uint256 splitId) {\n        require(splits[splitId].creator == msg.sender, \"Not the split creator\");\n        _;\n    }\n\n    modifier splitExists(uint256 splitId) {\n        require(splits[splitId].creator != address(0), \"Split does not exist\");\n        _;\n    }\n\n    /**\n     * @notice Create a new expense split group\n     * @param initialMembers Array of initial member addresses (creator is automatically included)\n     * @param defaultToken Default token for the split (address(0) for ETH)\n     * @return splitId The ID of the newly created split\n     */\n    function createSplit(\n        address[] memory initialMembers,\n        address defaultToken\n    ) external returns (uint256 splitId) {\n        splitId = _splitIdCounter++;\n        \n        Split storage newSplit = splits[splitId];\n        newSplit.creator = msg.sender;\n        newSplit.createdAt = block.timestamp;\n        newSplit.defaultToken = defaultToken;\n        newSplit.spendingCounter = 0;\n        newSplit.totalDebt = 0;\n        \n        newSplit.members.push(msg.sender);\n        \n        for (uint256 i = 0; i < initialMembers.length; i++) {\n            address member = initialMembers[i];\n            require(member != address(0), \"Invalid member address\");\n            require(member != msg.sender, \"Creator cannot be in members list\");\n            \n            for (uint256 j = 0; j < i; j++) {\n                require(initialMembers[j] != member, \"Duplicate member address\");\n            }\n            \n            newSplit.members.push(member);\n        }\n        \n        emit SplitCreated(splitId, msg.sender, initialMembers, defaultToken);\n    }\n\n    /**\n     * @notice Add a member to an existing split\n     * @param splitId The ID of the split\n     * @param member The address of the member to add\n     */\n    function addMember(uint256 splitId, address member) \n        external \n        splitExists(splitId) \n        onlyCreator(splitId) \n    {\n        require(member != address(0), \"Invalid member address\");\n        require(!_isMember(splitId, member), \"Member already exists\");\n        \n        splits[splitId].members.push(member);\n        emit MemberAdded(splitId, member);\n    }\n\n    /**\n     * @notice Remove a member from a split\n     * @param splitId The ID of the split\n     * @param member The address of the member to remove\n     */\n    function removeMember(uint256 splitId, address member) \n        external \n        splitExists(splitId) \n        onlyCreator(splitId) \n    {\n        require(member != splits[splitId].creator, \"Cannot remove creator\");\n        \n        address[] storage members = splits[splitId].members;\n        for (uint256 i = 0; i < members.length; i++) {\n            if (members[i] == member) {\n                members[i] = members[members.length - 1];\n                members.pop();\n                emit MemberRemoved(splitId, member);\n                return;\n            }\n        }\n        revert(\"Member not found\");\n    }\n\n    /**\n     * @notice Add an expense to the split\n     * @param splitId The ID of the split\n     * @param title Title/description of the expense\n     * @param amount Total amount of the expense\n     * @param forWho Array of member addresses who participated (empty = all members)\n     */\n    function addSpending(\n        uint256 splitId,\n        string memory title,\n        uint256 amount,\n        address[] memory forWho\n    ) external splitExists(splitId) {\n        require(_isMember(splitId, msg.sender), \"Not a member of this split\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        \n        Split storage split = splits[splitId];\n        address token = split.defaultToken;\n        \n        address[] memory participants = forWho.length == 0 ? split.members : forWho;\n        \n        for (uint256 i = 0; i < participants.length; i++) {\n            require(_isMember(splitId, participants[i]), \"Participant not a member\");\n        }\n        \n        Spending memory newSpending = Spending({\n            id: split.spendingCounter,\n            title: title,\n            payer: msg.sender,\n            amount: amount,\n            forWho: participants,\n            timestamp: block.timestamp,\n            token: token\n        });\n        \n        splitSpendings[splitId].push(newSpending);\n        split.spendingCounter++;\n        \n        uint256 sharePerPerson = amount / participants.length;\n        \n        for (uint256 i = 0; i < participants.length; i++) {\n            address participant = participants[i];\n            \n            if (participant == msg.sender) continue;\n            \n            Debt storage debt = debts[splitId][participant][msg.sender];\n            \n            if (debt.debtor == address(0)) {\n                debt.debtor = participant;\n                debt.creditor = msg.sender;\n                debt.token = token;\n                debt.amount = sharePerPerson;\n                debt.isPaid = false;\n            } else {\n                debt.amount += sharePerPerson;\n            }\n            \n            split.totalDebt += sharePerPerson;\n        }\n        \n        emit SpendingAdded(splitId, newSpending.id, title, msg.sender, amount, participants, token);\n    }\n\n    /**\n     * @notice Pay off a debt to a creditor\n     * @param splitId The ID of the split\n     * @param creditor The address of the creditor\n     * @param amount The amount to pay\n     */\n    function payDebt(\n        uint256 splitId,\n        address creditor,\n        uint256 amount\n    ) external payable splitExists(splitId) {\n        Debt storage debt = debts[splitId][msg.sender][creditor];\n        require(debt.debtor != address(0), \"No debt exists\");\n        require(!debt.isPaid, \"Debt already paid\");\n        require(amount > 0 && amount <= debt.amount, \"Invalid payment amount\");\n        \n        address token = splits[splitId].defaultToken;\n        \n        if (token == address(0)) {\n            require(msg.value == amount, \"Incorrect ETH amount\");\n            (bool success, ) = creditor.call{value: amount}(\"\");\n            require(success, \"ETH transfer failed\");\n        } else {\n            require(msg.value == 0, \"ETH not accepted for token payments\");\n            IERC20(token).safeTransferFrom(msg.sender, creditor, amount);\n        }\n        \n        debt.amount -= amount;\n        splits[splitId].totalDebt -= amount;\n        \n        if (debt.amount == 0) {\n            debt.isPaid = true;\n        }\n        \n        emit DebtPaid(splitId, msg.sender, creditor, amount, token);\n    }\n\n    /**\n     * @notice Get complete details of a split\n     * @param splitId The ID of the split\n     * @return creator The creator address\n     * @return members Array of member addresses\n     * @return createdAt Creation timestamp\n     * @return totalDebt Total outstanding debt\n     * @return defaultToken Default token address\n     * @return spendingCounter Number of spendings\n     */\n    function getSplitDetails(uint256 splitId) \n        external \n        view \n        splitExists(splitId)\n        returns (\n            address creator,\n            address[] memory members,\n            uint256 createdAt,\n            uint256 totalDebt,\n            address defaultToken,\n            uint256 spendingCounter\n        )\n    {\n        Split storage split = splits[splitId];\n        return (\n            split.creator,\n            split.members,\n            split.createdAt,\n            split.totalDebt,\n            split.defaultToken,\n            split.spendingCounter\n        );\n    }\n\n    /**\n     * @notice Get all spendings for a split\n     * @param splitId The ID of the split\n     * @return Array of spending records\n     */\n    function getSpendings(uint256 splitId) \n        external \n        view \n        splitExists(splitId)\n        returns (Spending[] memory)\n    {\n        return splitSpendings[splitId];\n    }\n\n    /**\n     * @notice Get debt between a debtor and creditor\n     * @param splitId The ID of the split\n     * @param debtor The debtor address\n     * @param creditor The creditor address\n     * @return Debt details\n     */\n    function getDebt(uint256 splitId, address debtor, address creditor)\n        external\n        view\n        splitExists(splitId)\n        returns (Debt memory)\n    {\n        return debts[splitId][debtor][creditor];\n    }\n\n    /**\n     * @notice Get all debts for a specific debtor in a split\n     * @param splitId The ID of the split\n     * @param debtor The debtor address\n     * @return creditors Array of creditors\n     * @return amounts Array of debt amounts\n     */\n    function getDebtorDebts(uint256 splitId, address debtor)\n        external\n        view\n        splitExists(splitId)\n        returns (address[] memory creditors, uint256[] memory amounts)\n    {\n        address[] memory members = splits[splitId].members;\n        uint256 debtCount = 0;\n        \n        for (uint256 i = 0; i < members.length; i++) {\n            if (debts[splitId][debtor][members[i]].amount > 0) {\n                debtCount++;\n            }\n        }\n        \n        creditors = new address[](debtCount);\n        amounts = new uint256[](debtCount);\n        \n        uint256 index = 0;\n        for (uint256 i = 0; i < members.length; i++) {\n            Debt storage debt = debts[splitId][debtor][members[i]];\n            if (debt.amount > 0) {\n                creditors[index] = members[i];\n                amounts[index] = debt.amount;\n                index++;\n            }\n        }\n    }\n\n    /**\n     * @notice Check if an address is a member of a split\n     * @param splitId The ID of the split\n     * @param account The address to check\n     * @return bool True if the address is a member\n     */\n    function _isMember(uint256 splitId, address account) private view returns (bool) {\n        address[] storage members = splits[splitId].members;\n        for (uint256 i = 0; i < members.length; i++) {\n            if (members[i] == account) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"
      }
    }
  }
}